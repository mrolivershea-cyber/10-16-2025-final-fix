import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { Upload, Activity } from 'lucide-react';
import axios from 'axios';

const UnifiedImportModal = ({ isOpen, onClose, onComplete }) => {
  const { API } = useAuth();

  // Import form state - simplified (no testing options)
  const [importData, setImportData] = useState('');
  const [protocol, setProtocol] = useState('pptp');
  const [previewResult, setPreviewResult] = useState(null);
  const [showPreview, setShowPreview] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [isLargeFile, setIsLargeFile] = useState(false);
  const [progress, setProgress] = useState(null);
  const [sessionId, setSessionId] = useState(null);
  const [isImportActive, setIsImportActive] = useState(false);

  useEffect(() => {
    if (isOpen) {
      // Reset form for new import
      setImportData('');
      setProtocol('pptp');
      setPreviewResult(null);
      setShowPreview(false);
      setSubmitting(false);
      setIsLargeFile(false);
      setProgress(null);
      setSessionId(null);
    }
  }, [isOpen]);

  const addSampleText = () => {
    const sampleTexts = {
      pptp: `Format 1 - Key-value pairs:\nIp: 144.229.29.35\nLogin: admin\nPass: admin\nState: California\nCity: Los Angeles\nZip: 90035\n---------------------\nFormat 2 - Single line with spaces (IP Pass Login State):\n76.178.64.46 admin admin CA\n96.234.52.227 admin admin NJ\n---------------------\nFormat 3 - Dash/pipe format:\n68.227.241.4 - admin:admin - Arizona/Phoenix 85001 | 2025-09-03 16:05:25\n96.42.187.97 - 1:1 - Michigan/Lapeer 48446 | 2025-09-03 09:50:22\n---------------------\nFormat 4 - Colon separated:\n70.171.218.52:admin:admin:US:Arizona:85001\n---------------------\nFormat 5 - Multi-line with Location:\nIP: 24.227.222.13\nCredentials: admin:admin\nLocation: Texas (Austin)\nZIP: 78701\n---------------------\nFormat 6 - With PPTP header (first 2 lines ignored):\n> PPTP_SVOIM_VPN:\nüö® PPTP Connection\nIP: 24.227.222.13\nCredentials: admin:admin\nLocation: Texas (Austin)\nZIP: 78701\n---------------------\nFormat 7 - Simple IP:Login:Pass:\n144.229.29.35:admin:password123\n76.178.64.46:user:pass456\n96.234.52.227:root:secret789`,
      ssh: `192.168.1.100:root:password123:US:New York:10001\n10.0.0.50 secret456 admin CA`,
      socks: `proxy1.example.com:1080:user:pass:US:California:90210\nproxy2.example.com:1080:user2:pass2:GB:London:`,
      server: `server1.example.com admin password US\nserver2.example.com root secret CA`,
      ovpn: `vpn1.example.com:1194:client1:pass123:US:Florida:33101\nvpn2.example.com:443:client2:pass456:GB:London:`
    };
    setImportData(sampleTexts[protocol] || sampleTexts.pptp);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // Check file size
    const fileSizeKB = file.size / 1024;
    const isLarge = fileSizeKB > 500; // 500KB threshold
    
    setIsLargeFile(isLarge);
    
    const reader = new FileReader();
    reader.onload = (e) => {
      setImportData(e.target.result);
      if (isLarge) {
        toast.warning(`üì¶ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª (${fileSizeKB.toFixed(1)}KB) - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`);
      } else {
        toast.success('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
    };
    reader.onerror = () => {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª');
    };
    reader.readAsText(file);
  };

  const handleImport = async () => {
    if (!importData.trim()) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }

    const dataSize = new Blob([importData]).size;
    const isLarge = dataSize > 500 * 1024; // 500KB

    console.log(`Import file size: ${(dataSize/1024).toFixed(1)}KB, isLarge: ${isLarge}`);
    setSubmitting(true);
    
    if (isLarge) {
      // Large file - use chunked processing immediately
      try {
        console.log('Using chunked processing for large file');
        toast.info(`üìÇ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (${(dataSize/1024).toFixed(1)}KB). –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —á–∞—Å—Ç—è–º...`);
        
        // Use chunked endpoint for large files
        const response = await axios.post(`${API}/nodes/import/chunked`, {
          data: importData,
          protocol,
          testing_mode: 'no_test'
        });

        const { session_id, message } = response.data || {};

        if (session_id) {
          console.log('Chunked processing started, session_id:', session_id);
          setSessionId(session_id);
          setIsImportActive(true);
          toast.success('üöÄ –ó–∞–ø—É—â–µ–Ω–∞ chunked –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...');
          startProgressTracking(session_id);
          return;
        } else {
          console.error('No session_id received:', response.data);
          throw new Error(message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å chunked processing');
        }
      } catch (error) {
        console.error('Chunked import error:', error);
        toast.error('‚ùå –û—à–∏–±–∫–∞ chunked –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + (error.response?.data?.message || error.message));
        setSubmitting(false);
        return;
      }
    }

    // Small file - use regular processing
    try {
      const response = await axios.post(`${API}/nodes/import`, {
        data: importData,
        protocol,
        testing_mode: 'no_test'
      });

      const { success, report, message } = response.data || {};

      if (!success) {
        toast.error(message || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
        setSubmitting(false);
        return;
      }

      // Regular processing completed
      setPreviewResult(report || null);
      setShowPreview(true);

      toast.success(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${report?.added || 0} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${report?.skipped_duplicates || 0} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
      toast.info('üìä –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "Testing" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
      
      setTimeout(() => {
        onClose();
      }, 2000);

      if (onComplete) onComplete(report);
    } catch (error) {
      console.error('Error importing:', error);
      const errorMsg = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ';
      toast.error(errorMsg);
    } finally {
      setSubmitting(false);
    }
  };

  const cancelImport = async () => {
    if (!sessionId) return;
    
    try {
      await axios.delete(`${API}/import/cancel/${sessionId}`);
      toast.info('‚èπÔ∏è –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω');
      setSubmitting(false);
      setProgress(null);
      setSessionId(null);
    } catch (error) {
      console.error('Cancel error:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç');
    }
  };

  const startProgressTracking = (sessionId) => {
    console.log('Starting progress tracking for session:', sessionId);
    let progressInterval;
    
    const trackProgress = async () => {
      try {
        const response = await axios.get(`${API}/import/progress/${sessionId}`);
        const progressData = response.data;
        
        console.log('Progress update:', progressData);
        setProgress(progressData);
        
        if (progressData.status === 'completed' || progressData.status === 'cancelled') {
          if (progressInterval) {
            clearInterval(progressInterval);
          }
          
          setSubmitting(false);
          setSessionId(null);
          
          if (progressData.status === 'completed') {
            setPreviewResult({
              added: progressData.added,
              skipped_duplicates: progressData.skipped,
              replaced_old: progressData.replaced,
              format_errors: progressData.errors
            });
            setShowPreview(true);
            
            toast.success(`‚úÖ –ò–º–ø–æ—Ä—Ç –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à—ë–Ω: ${progressData.added} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${progressData.skipped} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
          toast.info('üìä –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "Testing" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
          
          setTimeout(() => {
            onClose();
          }, 3000);
          
          if (onComplete) {
            onComplete({
              added: progressData.added,
              skipped_duplicates: progressData.skipped,
              replaced_old: progressData.replaced
            });
          }
          } else if (progressData.status === 'cancelled') {
            toast.info('‚èπÔ∏è –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          }
          return;
        }
        
        if (progressData.status === 'error') {
          if (progressInterval) {
            clearInterval(progressInterval);
          }
          setSubmitting(false);
          setSessionId(null);
          toast.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + (progressData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
          return;
        }
      } catch (error) {
        console.error('Progress tracking error:', error);
        if (progressInterval) {
          clearInterval(progressInterval);
        }
        setSubmitting(false);
        setSessionId(null);
        toast.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      }
    };
    
    // Initial call
    trackProgress();
    
    // Set up interval for regular updates
    progressInterval = setInterval(trackProgress, 2000); // Update every 2 seconds
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto" data-testid="unified-import-modal">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <DialogTitle className="flex items-center">
              <Activity className="h-5 w-5 mr-2" />
              –ò–º–ø–æ—Ä—Ç —É–∑–ª–æ–≤
            </DialogTitle>
          </div>
          <DialogDescription>
            –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –í—Å–µ –Ω–æ–≤—ã–µ —É–∑–ª—ã –ø–æ–ª—É—á–∞—Ç —Å—Ç–∞—Ç—É—Å "Not Tested". –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "Testing".
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 mt-4">
          {/* Progress Report –¥–ª—è chunked –∏–º–ø–æ—Ä—Ç–∞ */}
          {(submitting || isImportActive) && sessionId && (
            <Card className="border-blue-200 bg-blue-50">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-sm flex items-center">
                    <Activity className="h-4 w-4 mr-2 text-blue-600" />
                    üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...
                  </CardTitle>
                  <div className="flex space-x-2">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={onClose}
                    >
                      üìã –°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ñ–æ–Ω
                    </Button>
                    <Button 
                      variant="destructive" 
                      size="sm" 
                      onClick={cancelImport}
                      disabled={!sessionId}
                    >
                      ‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-3">
                {/* Progress Bar with Enhanced Info */}
                <div className="space-y-2">
                  {/* Main Progress Display */}
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {Math.round(((progress?.processed_chunks || 0) / (progress?.total_chunks || 1)) * 100)}%
                    </div>
                    <div className="text-sm text-gray-600">
                      –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {progress?.processed_chunks || 0} –∏–∑ {progress?.total_chunks || 0} —á–∞—Å—Ç–µ–π
                    </div>
                  </div>
                  
                  {/* Visual Progress Bar */}
                  <div className="relative w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                    <div 
                      className="bg-gradient-to-r from-blue-500 to-blue-600 h-4 rounded-full transition-all duration-500 ease-out flex items-center justify-end pr-2"
                      style={{ width: `${Math.max(((progress?.processed_chunks || 0) / (progress?.total_chunks || 1)) * 100, 5)}%` }}
                    >
                      <span className="text-xs text-white font-semibold">
                        {progress?.processed_chunks > 0 ? `${Math.round(((progress?.processed_chunks || 0) / (progress?.total_chunks || 1)) * 100)}%` : ''}
                      </span>
                    </div>
                  </div>
                  
                  {/* Processing Speed Info */}
                  {progress?.processed_chunks > 0 && (
                    <div className="text-xs text-center text-gray-500">
                      üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ~{Math.max(1, Math.round((progress.added + progress.skipped) / Math.max(1, progress.processed_chunks) * 10))} —É–∑–ª–æ–≤/—Å–µ–∫
                    </div>
                  )}
                </div>
                
                {/* Detailed Statistics */}
                <div className="grid grid-cols-4 gap-2 text-sm">
                  <div className="text-center p-3 bg-green-100 rounded-lg border border-green-200">
                    <div className="text-xl font-bold text-green-800">{progress?.added || 0}</div>
                    <div className="text-xs text-green-600">‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ</div>
                  </div>
                  <div className="text-center p-3 bg-yellow-100 rounded-lg border border-yellow-200">
                    <div className="text-xl font-bold text-yellow-800">{progress?.skipped || 0}</div>
                    <div className="text-xs text-yellow-600">‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ</div>
                  </div>
                  <div className="text-center p-3 bg-red-100 rounded-lg border border-red-200">
                    <div className="text-xl font-bold text-red-800">{progress?.errors || 0}</div>
                    <div className="text-xs text-red-600">‚ùå –û—à–∏–±–æ–∫</div>
                  </div>
                  <div className="text-center p-3 bg-blue-100 rounded-lg border border-blue-200">
                    <div className="text-xl font-bold text-blue-800">
                      {((progress?.added || 0) + (progress?.skipped || 0) + (progress?.errors || 0))}
                    </div>
                    <div className="text-xs text-blue-600">üìä –í—Å–µ–≥–æ</div>
                  </div>
                </div>
                
                {/* Current Operation with Timestamp */}
                <div className="bg-gray-50 border border-gray-200 p-3 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-semibold text-gray-700">üíº –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</span>
                    <span className="text-xs text-gray-500">
                      {new Date().toLocaleTimeString()}
                    </span>
                  </div>
                  <div className="text-sm text-gray-800 bg-white p-2 rounded border">
                    {progress?.current_operation || '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...'}
                  </div>
                  
                  {/* Progress Status Indicator */}
                  <div className="flex items-center mt-2 space-x-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                    <span className="text-xs text-blue-600 font-medium">–ê–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ */}
          {submitting && !sessionId && (
            <Card className="border-green-200 bg-green-50">
              <CardContent className="py-4">
                <div className="space-y-3">
                  <div className="flex items-center justify-center space-x-3">
                    <Activity className="h-6 w-6 text-green-600 animate-spin" />
                    <span className="text-lg font-semibold text-green-800">–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞</span>
                  </div>
                  
                  {/* Simple Progress Animation */}
                  <div className="w-full bg-green-200 rounded-full h-2">
                    <div className="bg-green-600 h-2 rounded-full animate-pulse w-full"></div>
                  </div>
                  
                  <div className="text-center text-sm text-green-700">
                    üìÇ –§–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (—Ä–∞–∑–º–µ—Ä &lt; 500KB)
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
          
          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ */}
          {!submitting && (
            <div className="space-y-2">
              <Label htmlFor="import-protocol">–¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</Label>
              <Select value={protocol} onValueChange={setProtocol}>
                <SelectTrigger data-testid="import-protocol-select">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pptp">PPTP</SelectItem>
                  <SelectItem value="ssh">SSH</SelectItem>
                  <SelectItem value="socks">SOCKS</SelectItem>
                  <SelectItem value="server">SERVER</SelectItem>
                  <SelectItem value="ovpn">OVPN</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="import-data">–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞</Label>
              <div className="flex space-x-2">
                <Button type="button" variant="outline" size="sm" onClick={addSampleText} data-testid="add-sample-text-btn">
                  –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä
                </Button>
                <Label htmlFor="file-upload" className="cursor-pointer">
                  <Button type="button" variant="outline" size="sm" asChild data-testid="upload-file-btn">
                    <span>
                      <Upload className="h-4 w-4 mr-2" />
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                    </span>
                  </Button>
                </Label>
                <input id="file-upload" type="file" accept=".txt,.csv" onChange={handleFileUpload} className="hidden" />
              </div>
            </div>
            <Textarea
              id="import-data"
              value={importData}
              onChange={(e) => setImportData(e.target.value)}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —É–∑–ª–æ–≤ –∑–¥–µ—Å—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª..."
              rows={12}
              className="font-mono text-sm"
              data-testid="import-data-textarea"
            />
          </div>

          {/* Progress bar for large file processing */}
          {progress && (
            <Card>
              <CardHeader>
                <CardTitle className="text-sm flex items-center">
                  <Activity className="h-4 w-4 mr-2 animate-spin" />
                  –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                    <span>{progress.processed_chunks}/{progress.total_chunks} —á–∞—Å—Ç–µ–π</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                      style={{ width: `${(progress.processed_chunks / progress.total_chunks) * 100}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">{progress.current_operation}</div>
                  {progress.added > 0 && (
                    <div className="grid grid-cols-4 gap-2 text-xs">
                      <div className="text-center">
                        <div className="font-bold text-green-600">{progress.added}</div>
                        <div>–î–æ–±–∞–≤–ª–µ–Ω–æ</div>
                      </div>
                      <div className="text-center">
                        <div className="font-bold text-yellow-600">{progress.skipped}</div>
                        <div>–î—É–±–ª–∏–∫–∞—Ç–æ–≤</div>
                      </div>
                      <div className="text-center">
                        <div className="font-bold text-blue-600">{progress.replaced}</div>
                        <div>–ó–∞–º–µ–Ω–µ–Ω–æ</div>
                      </div>
                      <div className="text-center">
                        <div className="font-bold text-red-600">{progress.errors}</div>
                        <div>–û—à–∏–±–æ–∫</div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–º–ø–æ—Ä—Ç–∞ */}
          {showPreview && previewResult && (
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-xl font-bold text-green-600">{previewResult.added || 0}</div>
                    <div className="text-xs text-gray-600">–î–æ–±–∞–≤–ª–µ–Ω–æ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-yellow-600">{previewResult.skipped_duplicates || 0}</div>
                    <div className="text-xs text-gray-600">–î—É–±–ª–∏–∫–∞—Ç–æ–≤</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-blue-600">{previewResult.replaced_old || 0}</div>
                    <div className="text-xs text-gray-600">–ó–∞–º–µ–Ω–µ–Ω–æ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-purple-600">{previewResult.queued_for_verification || 0}</div>
                    <div className="text-xs text-gray-600">–í –æ—á–µ—Ä–µ–¥–∏</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-red-600">{previewResult.format_errors || 0}</div>
                    <div className="text-xs text-gray-600">–û—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞</div>
                  </div>
                </div>
                {previewResult.processing_errors > 0 && (
                  <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded">
                    <h4 className="font-medium text-red-600 mb-2">–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {previewResult.processing_errors}</h4>
                    <div className="text-xs text-red-600">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.</div>
                  </div>
                )}
                {previewResult.smart_summary && (
                  <div className="mt-4 text-sm text-gray-700">{previewResult.smart_summary}</div>
                )}
              </CardContent>
            </Card>
          )}
        </div>

        <DialogFooter>
          <div className="flex space-x-2">
            <Button type="button" variant="outline" onClick={onClose}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
            {!showPreview ? (
              <Button onClick={handleImport} disabled={submitting || !importData.trim()} data-testid="import-btn">
                {submitting ? (
                  progress ? 
                    `–û–±—Ä–∞–±–æ—Ç–∫–∞... (${progress.processed_chunks}/${progress.total_chunks})` : 
                    '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...'
                ) : '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∑–ª—ã'}
              </Button>
            ) : (
              <Button onClick={onClose} variant="default" data-testid="close-after-import-btn">
                –ì–æ—Ç–æ–≤–æ
              </Button>
            )}
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default UnifiedImportModal;
