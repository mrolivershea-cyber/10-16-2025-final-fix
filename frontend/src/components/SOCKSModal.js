import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../components/ui/dialog';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Switch } from '../components/ui/switch';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Separator } from '../components/ui/separator';
import { toast } from '../hooks/use-toast';
import { 
  Shield, 
  Zap, 
  Database, 
  FileText, 
  Copy, 
  Settings2,
  Activity,
  Lock,
  Globe,
  Server
} from 'lucide-react';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';

const SOCKSModal = ({ isOpen, onClose, selectedNodeIds = [] }) => {
  const { API } = useAuth();
  const [loading, setLoading] = useState(false);
  const [socksStats, setSocksStats] = useState({
    active_connections: 0,
    total_tunnels: 0,
    online_socks: 0
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
  const [maskingSettings, setMaskingSettings] = useState({
    obfuscation: true,
    http_imitation: true,
    timing_randomization: true,
    tunnel_encryption: true
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [performanceSettings, setPerformanceSettings] = useState({
    tunnel_limit: 100,
    auto_scaling: true,
    cpu_threshold: 80,
    ram_threshold: 80
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const [securitySettings, setSecuritySettings] = useState({
    whitelist_enabled: false,
    allowed_ips: []
  });

  const [newAllowedIp, setNewAllowedIp] = useState('');
  const [activeProxies, setActiveProxies] = useState([]);
  const [proxyFileContent, setProxyFileContent] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (isOpen) {
      loadSOCKSData();
    }
  }, [isOpen]);

  const loadSOCKSData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SOCKS
      const statsResponse = await axios.get(`${API}/socks/stats`);
      setSocksStats(statsResponse.data);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const configResponse = await axios.get(`${API}/socks/config`);
      const config = configResponse.data;
      setMaskingSettings(config.masking || maskingSettings);
      setPerformanceSettings(config.performance || performanceSettings);
      setSecuritySettings(config.security || securitySettings);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
      const proxiesResponse = await axios.get(`${API}/socks/active`);
      setActiveProxies(proxiesResponse.data.proxies || []);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏
      const fileResponse = await axios.get(`${API}/socks/proxy-file`);
      setProxyFileContent(fileResponse.data.content || '');

    } catch (error) {
      console.error('Error loading SOCKS data:', error);
      // –ï—Å–ª–∏ endpoints –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
      setSocksStats({ active_connections: 0, total_tunnels: 0, online_socks: 0 });
      setActiveProxies([]);
      setProxyFileContent('# SOCKS –ø—Ä–æ–∫—Å–∏ —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤\n');
    }
  };

  const handleStartSocks = async () => {
    if (selectedNodeIds.length === 0) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–ª—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SOCKS —Å–µ—Ä–≤–∏—Å–æ–≤');
      return;
    }

    setLoading(true);
    try {
      const response = await axios.post(`${API}/socks/start`, {
        node_ids: selectedNodeIds,
        masking_settings: maskingSettings,
        performance_settings: performanceSettings,
        security_settings: securitySettings
      });

      const results = response.data.results;
      const successCount = results.filter(r => r.success).length;
      const failCount = results.length - successCount;

      if (successCount > 0) {
        toast.success(`‚úÖ SOCKS –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${successCount} —É–∑–ª–æ–≤`);
      }
      if (failCount > 0) {
        toast.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ${failCount} SOCKS —Å–µ—Ä–≤–∏—Å–æ–≤`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadSOCKSData();

    } catch (error) {
      console.error('Error starting SOCKS:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SOCKS: ' + (error.response?.data?.detail || error.message));
    } finally {
      setLoading(false);
    }
  };

  const handleStopSocks = async () => {
    if (selectedNodeIds.length === 0) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–ª—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SOCKS —Å–µ—Ä–≤–∏—Å–æ–≤');
      return;
    }

    setLoading(true);
    try {
      const response = await axios.post(`${API}/socks/stop`, {
        node_ids: selectedNodeIds
      });

      const results = response.data.results;
      const successCount = results.filter(r => r.success).length;

      if (successCount > 0) {
        toast.success(`üõë SOCKS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${successCount} —É–∑–ª–æ–≤`);
      }

      await loadSOCKSData();

    } catch (error) {
      console.error('Error stopping SOCKS:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SOCKS: ' + (error.response?.data?.detail || error.message));
    } finally {
      setLoading(false);
    }
  };

  const handleSaveConfig = async () => {
    setLoading(true);
    try {
      await axios.post(`${API}/socks/config`, {
        masking: maskingSettings,
        performance: performanceSettings,
        security: securitySettings
      });
      toast.success('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SOCKS —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('Error saving config:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + (error.response?.data?.detail || error.message));
    } finally {
      setLoading(false);
    }
  };

  const handleAddAllowedIp = () => {
    if (newAllowedIp.trim()) {
      setSecuritySettings(prev => ({
        ...prev,
        allowed_ips: [...prev.allowed_ips, newAllowedIp.trim()]
      }));
      setNewAllowedIp('');
    }
  };

  const handleRemoveAllowedIp = (index) => {
    setSecuritySettings(prev => ({
      ...prev,
      allowed_ips: prev.allowed_ips.filter((_, i) => i !== index)
    }));
  };

  const handleViewDatabase = async () => {
    try {
      const response = await axios.get(`${API}/socks/database-report`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
      const blob = new Blob([response.data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `socks_database_report_${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success('üìä –û—Ç—á–µ—Ç –ë–î SOCKS —Å–∫–∞—á–∞–Ω');
    } catch (error) {
      console.error('Error downloading database report:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ë–î');
    }
  };

  const handleOpenProxyFile = () => {
    const blob = new Blob([proxyFileContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'active_proxies.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('üìÑ –§–∞–π–ª –ø—Ä–æ–∫—Å–∏ —Å–∫–∞—á–∞–Ω');
  };

  const handleCopyCredentials = async () => {
    if (activeProxies.length === 0) {
      toast.error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö SOCKS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const credentials = activeProxies.map(proxy => 
      `socks5://${proxy.login}:${proxy.password}@${proxy.ip}:${proxy.port}`
    ).join('\n');

    try {
      await navigator.clipboard.writeText(credentials);
      toast.success(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${activeProxies.length} SOCKS credentials`);
    } catch (error) {
      console.error('Error copying to clipboard:', error);
      toast.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Shield className="h-6 w-6 text-blue-600" />
            SOCKS –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </DialogTitle>
          <DialogDescription>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SOCKS5 —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
          </DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="space-y-4">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SOCKS */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="h-5 w-5" />
                  SOCKS –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div>
                    <div className="text-2xl font-bold text-green-600">{socksStats.online_socks}</div>
                    <div className="text-sm text-gray-600">Online</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-blue-600">{socksStats.total_tunnels}</div>
                    <div className="text-sm text-gray-600">–¢—É–Ω–Ω–µ–ª–∏</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-purple-600">{socksStats.active_connections}</div>
                    <div className="text-sm text-gray-600">–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SOCKS */}
            <Card>
              <CardHeader>
                <CardTitle>–°—Ç–∞—Ä—Ç –°–µ—Ä–≤–∏—Å</CardTitle>
                <CardDescription>
                  –í—ã–±—Ä–∞–Ω–æ —É–∑–ª–æ–≤: {selectedNodeIds.length}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex gap-2">
                  <Button 
                    onClick={handleStartSocks}
                    disabled={loading || selectedNodeIds.length === 0}
                    className="bg-green-600 hover:bg-green-700 flex-1"
                  >
                    <Zap className="h-4 w-4 mr-2" />
                    –°—Ç–∞—Ä—Ç SOCKS
                  </Button>
                  <Button 
                    onClick={handleStopSocks}
                    disabled={loading || selectedNodeIds.length === 0}
                    variant="destructive"
                    className="flex-1"
                  >
                    <Server className="h-4 w-4 mr-2" />
                    –°—Ç–æ–ø SOCKS
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* –î–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ë–î */}
            <Card>
              <CardHeader>
                <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–∞–Ω–Ω—ã–º–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <Button onClick={handleViewDatabase} variant="outline" className="w-full">
                    <Database className="h-4 w-4 mr-2" />
                    –°–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑—É –æ—Ç—á–µ—Ç
                  </Button>
                  <Button onClick={handleOpenProxyFile} variant="outline" className="w-full">
                    <FileText className="h-4 w-4 mr-2" />
                    –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                  </Button>
                  <Button onClick={handleCopyCredentials} variant="outline" className="w-full">
                    <Copy className="h-4 w-4 mr-2" />
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å credentials
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="space-y-4">
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lock className="h-5 w-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="obfuscation">–û–±—Ñ—É—Å–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</Label>
                  <Switch 
                    id="obfuscation"
                    checked={maskingSettings.obfuscation}
                    onCheckedChange={(checked) => 
                      setMaskingSettings(prev => ({ ...prev, obfuscation: checked }))
                    }
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="http_imitation">–ò–º–∏—Ç–∞—Ü–∏—è HTTP/HTTPS</Label>
                  <Switch 
                    id="http_imitation"
                    checked={maskingSettings.http_imitation}
                    onCheckedChange={(checked) => 
                      setMaskingSettings(prev => ({ ...prev, http_imitation: checked }))
                    }
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="timing_randomization">–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è timing</Label>
                  <Switch 
                    id="timing_randomization"
                    checked={maskingSettings.timing_randomization}
                    onCheckedChange={(checked) => 
                      setMaskingSettings(prev => ({ ...prev, timing_randomization: checked }))
                    }
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="tunnel_encryption">–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è</Label>
                  <Switch 
                    id="tunnel_encryption"
                    checked={maskingSettings.tunnel_encryption}
                    onCheckedChange={(checked) => 
                      setMaskingSettings(prev => ({ ...prev, tunnel_encryption: checked }))
                    }
                  />
                </div>
              </CardContent>
            </Card>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings2 className="h-5 w-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="tunnel_limit">–õ–∏–º–∏—Ç —Ç—É–Ω–Ω–µ–ª–µ–π</Label>
                  <Input
                    id="tunnel_limit"
                    type="number"
                    value={performanceSettings.tunnel_limit}
                    onChange={(e) => 
                      setPerformanceSettings(prev => ({ 
                        ...prev, 
                        tunnel_limit: parseInt(e.target.value) || 100 
                      }))
                    }
                    placeholder="100"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="auto_scaling">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ</Label>
                  <Switch 
                    id="auto_scaling"
                    checked={performanceSettings.auto_scaling}
                    onCheckedChange={(checked) => 
                      setPerformanceSettings(prev => ({ ...prev, auto_scaling: checked }))
                    }
                  />
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <Label htmlFor="cpu_threshold">CPU –ø–æ—Ä–æ–≥ (%)</Label>
                    <Input
                      id="cpu_threshold"
                      type="number"
                      value={performanceSettings.cpu_threshold}
                      onChange={(e) => 
                        setPerformanceSettings(prev => ({ 
                          ...prev, 
                          cpu_threshold: parseInt(e.target.value) || 80 
                        }))
                      }
                    />
                  </div>
                  <div>
                    <Label htmlFor="ram_threshold">RAM –ø–æ—Ä–æ–≥ (%)</Label>
                    <Input
                      id="ram_threshold"
                      type="number"
                      value={performanceSettings.ram_threshold}
                      onChange={(e) => 
                        setPerformanceSettings(prev => ({ 
                          ...prev, 
                          ram_threshold: parseInt(e.target.value) || 80 
                        }))
                      }
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="whitelist_enabled">Whitelist IP –∞–¥—Ä–µ—Å–æ–≤</Label>
                  <Switch 
                    id="whitelist_enabled"
                    checked={securitySettings.whitelist_enabled}
                    onCheckedChange={(checked) => 
                      setSecuritySettings(prev => ({ ...prev, whitelist_enabled: checked }))
                    }
                  />
                </div>
                
                {securitySettings.whitelist_enabled && (
                  <div className="space-y-2">
                    <div className="flex gap-2">
                      <Input
                        placeholder="192.168.1.1"
                        value={newAllowedIp}
                        onChange={(e) => setNewAllowedIp(e.target.value)}
                      />
                      <Button onClick={handleAddAllowedIp} size="sm">
                        –î–æ–±–∞–≤–∏—Ç—å
                      </Button>
                    </div>
                    <div className="space-y-1 max-h-32 overflow-y-auto">
                      {securitySettings.allowed_ips.map((ip, index) => (
                        <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                          <span className="text-sm">{ip}</span>
                          <Button 
                            size="sm" 
                            variant="ghost" 
                            onClick={() => handleRemoveAllowedIp(index)}
                          >
                            ‚úï
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        <Separator />

        <div className="flex justify-between">
          <Button variant="outline" onClick={onClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button onClick={handleSaveConfig} disabled={loading}>
            <Settings2 className="h-4 w-4 mr-2" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SOCKSModal;