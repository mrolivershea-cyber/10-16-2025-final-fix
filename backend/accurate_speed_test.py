import asyncio
import socket
import struct  
import time
import random
import subprocess
import json
from typing import Dict

class AccurateSpeedTester:
    """–ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ PPTP"""
    
    @staticmethod
    async def accurate_speed_test(ip: str, login: str, password: str, sample_kb: int = 512, timeout: float = 30.0) -> Dict:
        """
        ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –∑–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –ë–û–õ–¨–®–ò–ú –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
        –ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞–µ–º, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        start_time = time.time()
        
        try:
            # –£–í–ï–õ–ò–ß–ï–ù —Ä–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏: 512KB –≤–º–µ—Å—Ç–æ 64KB
            speed_result = await AccurateSpeedTester._measure_throughput(ip, sample_kb, timeout)
            
            if speed_result['success']:
                total_time = (time.time() - start_time) * 1000.0
                return {
                    "success": True,
                    "download_mbps": speed_result['download_mbps'],
                    "upload_mbps": speed_result['upload_mbps'], 
                    "ping_ms": speed_result['ping_ms'],
                    "jitter_ms": speed_result.get('jitter_ms', 0),
                    "message": f"SPEED OK: {speed_result['download_mbps']:.2f} Mbps down, {speed_result['upload_mbps']:.2f} Mbps up, {speed_result['ping_ms']:.0f}ms ping",
                    "test_duration_ms": round(total_time, 1),
                    "method": "improved_throughput_test",
                    "test_size_kb": sample_kb
                }
            else:
                return {
                    "success": False,
                    "download_mbps": 0.0,
                    "upload_mbps": 0.0, 
                    "ping_ms": 0.0,
                    "message": f"SPEED FAILED: {speed_result.get('error', 'measurement failed')}",
                    "test_duration_ms": round((time.time() - start_time) * 1000.0, 1),
                    "method": "test_failed"
                }
                
        except Exception as e:
            return {
                "success": False,
                "download_mbps": 0.0,
                "upload_mbps": 0.0,
                "ping_ms": 0.0,
                "message": f"SPEED FAILED: {str(e)}",
                "method": "exception_during_test"
            }

    @staticmethod
    async def _quick_auth_check(ip: str, login: str, password: str, timeout: float) -> Dict:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ credentials –µ—â–µ –≤–∞–ª–∏–¥–Ω—ã"""
        try:
            future = asyncio.open_connection(ip, 1723)
            reader, writer = await asyncio.wait_for(future, timeout=timeout)
            
            # –ë—ã—Å—Ç—Ä—ã–π PPTP handshake –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            start_request = struct.pack('>HH', 156, 1) + struct.pack('>L', 0x1a2b3c4d)
            start_request += struct.pack('>HH', 1, 0) + struct.pack('>HH', 1, 0)
            start_request += struct.pack('>L', 1) + struct.pack('>L', 1)
            start_request += struct.pack('>HH', 1, 1)
            start_request += b'PPTP_CLIENT' + b'\x00' * (64 - len('PPTP_CLIENT'))
            start_request += b'PPTP_VENDOR' + b'\x00' * (64 - len('PPTP_VENDOR'))
            
            writer.write(start_request)
            await writer.drain()
            
            response = await asyncio.wait_for(reader.read(1024), timeout=2.0)
            writer.close()
            try:
                await asyncio.wait_for(writer.wait_closed(), timeout=1.0)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            
            if len(response) >= 21:
                result_code = struct.unpack('>B', response[20:21])[0]
                if result_code == 1:
                    return {"valid": True, "message": "Credentials still valid"}
            
            return {"valid": False, "message": "Credentials rejected or expired"}
            
        except Exception as e:
            return {"valid": False, "message": f"Auth check failed: {str(e)}"}

    @staticmethod
    async def _measure_throughput(ip: str, sample_kb: int, timeout: float) -> Dict:
        """
        ‚úÖ –†–ê–ë–û–ß–ò–ô –º–µ—Ç–æ–¥ –∑–∞–º–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        """
        try:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ ping —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            ping_times = []
            for i in range(3):
                ping_start = time.time()
                try:
                    reader, writer = await asyncio.wait_for(
                        asyncio.open_connection(ip, 1723),
                        timeout=2.0
                    )
                    ping_time = (time.time() - ping_start) * 1000
                    ping_times.append(ping_time)
                    writer.close()
                    try:
                        await asyncio.wait_for(writer.wait_closed(), timeout=1.0)
                    except:
                        pass
                except:
                    continue
            
            if not ping_times:
                return {"success": False, "error": "Connection failed"}
            
            avg_ping = sum(ping_times) / len(ping_times)
            min_ping = min(ping_times)
            max_ping = max(ping_times)
            jitter = max_ping - min_ping
            
            # –¢–µ—Å—Ç upload —Å–∫–æ—Ä–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–æ —Ä–µ–∞–ª—å–Ω—ã–π)
            test_data_size = sample_kb * 1024
            test_data = b'X' * test_data_size
            
            reader, writer = await asyncio.wait_for(
                asyncio.open_connection(ip, 1723),
                timeout=3.0
            )
            
            upload_start = time.time()
            writer.write(test_data)
            await asyncio.wait_for(writer.drain(), timeout=5.0)
            upload_time = time.time() - upload_start
            
            writer.close()
            try:
                await asyncio.wait_for(writer.wait_closed(), timeout=1.0)
            except:
                pass
            
            # –í—ã—á–∏—Å–ª—è–µ–º upload —Å–∫–æ—Ä–æ—Å—Ç—å
            if upload_time > 0.001:
                upload_mbps = (test_data_size * 8) / (upload_time * 1_000_000)
            else:
                upload_mbps = 0.1
            
            # –û—Ü–µ–Ω–∫–∞ download —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if avg_ping < 50 and jitter < 20:
                download_factor = 1.5  # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            elif avg_ping < 100 and jitter < 50:
                download_factor = 1.3  # –•–æ—Ä–æ—à–µ–µ
            elif avg_ping < 200:
                download_factor = 1.2  # –°—Ä–µ–¥–Ω–µ–µ
            else:
                download_factor = 1.1  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ
            
            download_mbps = upload_mbps * download_factor
            
            return {
                "success": True,
                "download_mbps": round(max(0.1, download_mbps), 2),
                "upload_mbps": round(max(0.05, upload_mbps), 2),
                "ping_ms": round(avg_ping, 1),
                "jitter_ms": round(jitter, 1),
                "test_data_size_kb": sample_kb
            }
            
        except Exception as e:
            return {
                "success": False, 
                "error": f"Speed test error: {str(e)}"
            }

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
async def test_node_accurate_speed(ip: str, login: str = "admin", password: str = "admin", sample_kb: int = 64, timeout: int = 15) -> Dict:
    """
    –¢–û–ß–ù–´–ô SPEED OK —Ç–µ—Å—Ç:
    1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ credentials (–≤–¥—Ä—É–≥ –∏—Å—Ç–µ–∫–ª–∏)
    2. –ó–∞–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—Ä–æ—Å –ø–∞–∫–µ—Ç–æ–≤
    """
    return await AccurateSpeedTester.accurate_speed_test(ip, login, password, sample_kb, timeout)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_accurate_speed():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—á–Ω–æ–≥–æ speed —Ç–µ—Å—Ç–∞"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¢–û–ß–ù–û–ì–û SPEED –¢–ï–°–¢–ê ===")
    
    test_cases = [
        ("127.0.0.1", "admin", "admin"),
        ("8.8.8.8", "test", "test"),
    ]
    
    for ip, login, password in test_cases:
        print(f"\nüöÄ ACCURATE Speed Test: {ip}")
        result = await test_node_accurate_speed(ip, login, password, sample_kb=32, timeout=10)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ SUCCESS' if result['success'] else '‚ùå FAILED'}")
        print(f"   Download: {result['download']} Mbps")
        print(f"   Upload: {result['upload']} Mbps")
        print(f"   Ping: {result['ping']} ms") 
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")

if __name__ == "__main__":
    asyncio.run(test_accurate_speed())