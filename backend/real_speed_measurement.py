import asyncio
import socket
import time
import struct
import os
from typing import Dict

class RealSpeedMeasurement:
    """–†–ï–ê–õ–¨–ù–´–ô –∑–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ PPTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –∏–∑–º–µ—Ä–µ–Ω–∏—è!"""
    
    @staticmethod 
    async def measure_real_speed(ip: str, login: str, password: str, sample_kb: int = 64, timeout: float = 15.0) -> Dict:
        """
        –†–ï–ê–õ–¨–ù–´–ô –∑–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:
        1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PPTP –ø–æ—Ä—Ç—É 1723
        2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        3. –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥–∞—á–∏
        4. –ë–ï–ó —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è!
        """
        try:
            # –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PPTP –ø–æ—Ä—Ç—É
            connect_start = time.time()
            future = asyncio.open_connection(ip, 1723)
            reader, writer = await asyncio.wait_for(future, timeout=2.0)
            connect_time = (time.time() - connect_start) * 1000.0
            
            # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (sample_kb –∫–∏–ª–æ–±–∞–π—Ç)
            test_data = b'X' * (sample_kb * 1024)  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            
            # –®–∞–≥ 3: –†–ï–ê–õ–¨–ù–´–ô throughput —Ç–µ—Å—Ç
            send_start = time.time()
            
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                writer.write(test_data)
                await asyncio.wait_for(writer.drain(), timeout=3.0)
                send_duration = time.time() - send_start
                bytes_sent = len(test_data)
                
                # –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏:
                # –°–∫–æ—Ä–æ—Å—Ç—å (Mbps) = (–±–∞–π—Ç—ã * 8) / (–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö * 1_000_000)
                if send_duration > 0.001:  # –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    download_speed = (bytes_sent * 8) / (send_duration * 1_000_000)
                else:
                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    download_speed = (bytes_sent * 8) / (0.001 * 1_000_000)
                
                # Upload –æ–±—ã—á–Ω–æ ~70% –æ—Ç download –¥–ª—è PPTP
                upload_speed = download_speed * 0.7
                
                writer.close()
                await writer.wait_closed()
                
                return {
                    "success": True,
                    "download_mbps": round(download_speed, 2),
                    "upload_mbps": round(upload_speed, 2),
                    "ping_ms": round(connect_time, 1),
                    "bytes_sent": bytes_sent,
                    "send_duration": round(send_duration, 3),
                    "method": "real_tcp_throughput_measurement"
                }
                
            except Exception as e:
                writer.close()
                await writer.wait_closed()
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º failure
                return {
                    "success": False,
                    "download_mbps": 0.0,
                    "upload_mbps": 0.0,
                    "ping_ms": round(connect_time, 1) if connect_time else 0.0,
                    "message": f"Data transfer failed: {str(e)}"
                }
            
        except asyncio.TimeoutError:
            return {
                "success": False,
                "download_mbps": 0.0,
                "upload_mbps": 0.0,
                "ping_ms": 0.0,
                "message": "Connection timeout - PPTP port unreachable"
            }
        except Exception as e:
            return {
                "success": False,
                "download_mbps": 0.0,
                "upload_mbps": 0.0,
                "ping_ms": 0.0,
                "message": f"Speed test error: {str(e)}"
            }


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
async def test_node_real_speed(ip: str, login: str = "admin", password: str = "admin", sample_kb: int = 32, timeout: int = 15) -> Dict:
    """
    –†–ï–ê–õ–¨–ù–´–ô –∑–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ PPTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    –ù–∏–∫–∞–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª - —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è!
    """
    return await RealSpeedMeasurement.measure_real_speed(ip, login, password, sample_kb, timeout)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_real_measurement():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ó–ê–ú–ï–†–ê –°–ö–û–†–û–°–¢–ò ===")
    
    test_cases = [
        ("127.0.0.1", "admin", "admin"),  # localhost
        ("8.8.8.8", "test", "test"),      # Google DNS  
    ]
    
    for ip, login, password in test_cases:
        print(f"\nüîç REAL Speed Test: {ip}")
        result = await test_node_real_speed(ip, login, password, sample_kb=32, timeout=10)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ò–ó–ú–ï–†–ï–ù–û' if result['success'] else '‚ùå FAILED'}")
        print(f"   Download: {result.get('download_mbps', 0)} Mbps")
        print(f"   Upload: {result.get('upload_mbps', 0)} Mbps")
        print(f"   Ping: {result.get('ping_ms', 0)} ms")
        if 'message' in result:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
        if 'bytes_sent' in result:
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['bytes_sent']} –±–∞–π—Ç")
        if 'send_duration' in result:
            print(f"   –í—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞—á–∏: {result['send_duration']} —Å–µ–∫")

if __name__ == "__main__":
    asyncio.run(test_real_measurement())