╔════════════════════════════════════════════════════════════════╗
║                                                                ║
║        CONNEXA ADMIN PANEL - ПОЛНАЯ УСТАНОВКА С НУЛЯ          ║
║              VPN Node Testing + PPTP + SOCKS5                 ║
║                                                                ║
╚════════════════════════════════════════════════════════════════╝


📦 АРХИВ: connexa_admin_full.tar.gz (442 KB)
📍 Путь: /app/connexa_admin_full.tar.gz


════════════════════════════════════════════════════════════════
  СИСТЕМНЫЕ ТРЕБОВАНИЯ
════════════════════════════════════════════════════════════════

✅ Ubuntu 20.04+ или Debian 11+
✅ Docker с --cap-add=NET_ADMIN или --privileged
✅ Python 3.11+
✅ Node.js 16+ и Yarn
✅ 2GB RAM минимум
✅ 10GB свободного места


════════════════════════════════════════════════════════════════
  ПОЛНАЯ УСТАНОВКА - 10 ШАГОВ
════════════════════════════════════════════════════════════════

ШАГ 1: КОПИРОВАНИЕ АРХИВА НА ВАШ СЕРВЕР
-----------------------------------------

scp /app/connexa_admin_full.tar.gz root@YOUR_SERVER:/root/


ШАГ 2: РАСПАКОВКА НА СЕРВЕРЕ
-----------------------------

ssh root@YOUR_SERVER
mkdir -p /app
cd /app
tar -xzf /root/connexa_admin_full.tar.gz


ШАГ 3: УСТАНОВКА СИСТЕМНЫХ ПАКЕТОВ
-----------------------------------

# Обновить систему
apt-get update

# Python зависимости
apt-get install -y python3 python3-pip python3-venv

# PPTP зависимости
apt-get install -y ppp pptp-linux

# Node.js и Yarn (если нет)
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs
npm install -g yarn

# SQLite
apt-get install -y sqlite3


ШАГ 4: СОЗДАТЬ /dev/ppp УСТРОЙСТВО
-----------------------------------

mknod /dev/ppp c 108 0
chmod 600 /dev/ppp
ls -la /dev/ppp


ШАГ 5: НАСТРОЙКА ПЕРЕМЕННЫХ ОКРУЖЕНИЯ
--------------------------------------

cd /app/backend

# Отредактируйте .env файл - укажите ваш домен
nano .env

Измените:
ADMIN_SERVER_IP=vpn-tester.preview.emergentagent.com
на:
ADMIN_SERVER_IP=your-actual-domain.com


ШАГ 6: УСТАНОВКА PYTHON ЗАВИСИМОСТЕЙ
-------------------------------------

cd /app/backend
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt


ШАГ 7: УСТАНОВКА FRONTEND ЗАВИСИМОСТЕЙ
---------------------------------------

cd /app/frontend
yarn install


ШАГ 8: НАСТРОЙКА FRONTEND
--------------------------

cd /app/frontend
nano .env

Измените REACT_APP_BACKEND_URL на ваш домен:
REACT_APP_BACKEND_URL=https://your-domain.com


ШАГ 9: ЗАПУСК ПРИЛОЖЕНИЯ
-------------------------

Вариант A: Через supervisor (рекомендуется)
-------------------------------------------

# Установить supervisor
apt-get install -y supervisor

# Создать конфиг для backend
cat > /etc/supervisor/conf.d/connexa-backend.conf << 'EOF'
[program:backend]
command=/app/backend/venv/bin/uvicorn server:app --host 0.0.0.0 --port 8001
directory=/app/backend
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/backend.err.log
stdout_logfile=/var/log/supervisor/backend.out.log
user=root
EOF

# Создать конфиг для frontend
cat > /etc/supervisor/conf.d/connexa-frontend.conf << 'EOF'
[program:frontend]
command=/usr/bin/yarn start
directory=/app/frontend
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/frontend.err.log
stdout_logfile=/var/log/supervisor/frontend.out.log
environment=PATH="/usr/local/bin:/usr/bin:/bin",HOST="0.0.0.0"
user=root
EOF

# Перезагрузить supervisor
supervisorctl reread
supervisorctl update
supervisorctl start all


Вариант Б: Ручной запуск (для теста)
-------------------------------------

# Backend (в отдельном терминале)
cd /app/backend
source venv/bin/activate
uvicorn server:app --host 0.0.0.0 --port 8001

# Frontend (в другом терминале)
cd /app/frontend
yarn start


ШАГ 10: ПРОВЕРКА УСТАНОВКИ
---------------------------

# Проверить PPTP окружение
bash /app/check_pptp_env.sh

# Проверить backend
curl http://localhost:8001/api/stats

# Проверить frontend
curl http://localhost:3000


════════════════════════════════════════════════════════════════
  НАСТРОЙКА NGINX (опционально)
════════════════════════════════════════════════════════════════

Если используете Nginx как reverse proxy:

server {
    listen 80;
    server_name your-domain.com;

    location /api {
        proxy_pass http://localhost:8001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}


════════════════════════════════════════════════════════════════
  ПРОВЕРКА РАБОТЫ
════════════════════════════════════════════════════════════════

1. Откройте браузер: http://your-domain.com
2. Логин: admin / admin
3. Выберите узлы со статусом ping_ok
4. Нажмите "Start Services"
5. Ждите 10-20 секунд
6. Статус → "online" ✅
7. SOCKS → "Открыть текстовый файл" → прокси готовы ✅


════════════════════════════════════════════════════════════════
  СТРУКТУРА ПРОЕКТА
════════════════════════════════════════════════════════════════

/app/
├── backend/
│   ├── server.py                    - FastAPI приложение
│   ├── database.py                  - SQLite модели
│   ├── schemas.py                   - Pydantic схемы
│   ├── auth.py                      - Аутентификация
│   ├── services.py                  - Service manager
│   ├── pptp_auth_test.py            - PPTP аутентификация
│   ├── pptp_tunnel_manager.py       - PPTP туннели ⭐ НОВЫЙ
│   ├── socks_server.py              - SOCKS5 сервер
│   ├── socks_monitor.py             - SOCKS мониторинг
│   ├── accurate_speed_test.py       - Speed тестирование
│   ├── requirements.txt             - Python зависимости
│   └── .env                         - Переменные окружения
├── frontend/
│   ├── src/
│   │   ├── App.js
│   │   ├── components/
│   │   │   ├── AdminPanel.js        - Главная панель
│   │   │   ├── TestingModal.js      - Модалка тестирования
│   │   │   ├── SOCKSModal.js        - SOCKS управление
│   │   │   └── ...
│   │   └── contexts/
│   │       └── AuthContext.js
│   ├── package.json
│   └── .env
├── install.sh                       - Автоустановка ⭐
├── check_pptp_env.sh                - Проверка окружения ⭐
└── INSTALL.txt                      - Эта инструкция


════════════════════════════════════════════════════════════════
  ТЕХНОЛОГИИ
════════════════════════════════════════════════════════════════

Backend:
  - Python 3.11
  - FastAPI
  - SQLAlchemy + SQLite
  - pppd + pptp-linux
  - asyncio

Frontend:
  - React 18
  - Tailwind CSS
  - shadcn/ui
  - Axios

Инфраструктура:
  - Supervisor (управление процессами)
  - Nginx (reverse proxy, опционально)


════════════════════════════════════════════════════════════════
  ПОРТЫ
════════════════════════════════════════════════════════════════

8001  - Backend API
3000  - Frontend dev server
1083-9999 - SOCKS5 прокси (динамически)


════════════════════════════════════════════════════════════════
  БЫСТРАЯ УСТАНОВКА ЗА 5 МИНУТ
════════════════════════════════════════════════════════════════

# 1. Скопировать архив
scp /app/connexa_admin_full.tar.gz root@YOUR_SERVER:/root/

# 2. На сервере распаковать
cd /app && tar -xzf /root/connexa_admin_full.tar.gz

# 3. Запустить автоустановку
bash /app/install.sh

# 4. Настроить .env файлы (ваш домен)
nano /app/backend/.env
nano /app/frontend/.env

# 5. Установить зависимости
cd /app/backend && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt
cd /app/frontend && yarn install

# 6. Запустить через supervisor (или вручную)
supervisorctl start all


ГОТОВО! Открыть http://your-domain.com


════════════════════════════════════════════════════════════════
  ЧТО ДЕЛАЕТ ПРИЛОЖЕНИЕ
════════════════════════════════════════════════════════════════

✅ Тестирование VPN узлов (PING LIGHT, PING OK, SPEED OK)
✅ Запуск SOCKS5 прокси поверх PPTP туннелей
✅ Управление узлами (импорт, экспорт, фильтрация)
✅ Мониторинг статусов в реальном времени
✅ Автоматическая генерация прокси credentials


════════════════════════════════════════════════════════════════
  ПОДДЕРЖКА
════════════════════════════════════════════════════════════════

Документация в архиве:
  - INSTALL.txt - основная инструкция
  - QUICKSTART.md - быстрый старт
  - README_DEPLOYMENT.md - полная документация
  - PPTP_DEPLOYMENT_GUIDE.md - техническая документация

Скрипты:
  - install.sh - автоматическая установка
  - check_pptp_env.sh - проверка окружения

Логи:
  - Backend: /var/log/supervisor/backend.err.log
  - Frontend: /var/log/supervisor/frontend.err.log
  - PPTP: /tmp/pptp_node_*.log
