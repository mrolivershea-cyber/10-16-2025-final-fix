<analysis>
The trajectory outlines a transition from a completed feature refactor to a new, complex set of requirements driven by bug discovery. The initial work by the previous AI engineer successfully unified node statuses into a single, sequential system ( ->  -> , etc.). However, this was demonstrated on a clean, seeded database after the original was accidentally wiped.

The new user interaction begins after the user populates this database with 2,336 real configurations. This immediately exposes critical bugs: newly imported nodes are incorrectly assigned  status instead of , and the UI dashboard statistics () are not synchronized with the database, showing Not Tested as 0.

The user's request evolves through a detailed conversation from a simple bug fix to a sophisticated feature specification. The core task is now to build an admin panel for managing PPTP-based SOCKS and OVPN services. This involves:
1.  **Fixing the Core Logic:** Correcting the entire status assignment and reporting system to ensure data integrity between the database, API, and frontend.
2.  **Implementing a Manual Workflow:** Building out the admin-triggered sequence of tests: PING, speed, and simultaneous SOCKS+OVPN service launch.
3.  **Creating a Real-Time Monitor:** Adding a background process that *only* checks active () nodes every 5 minutes, automatically updating their status to  with a timestamp if they fail. This creates a clear distinction between manually managed testing and automated monitoring of live services.
</analysis>

<product_requirements>
The primary objective is to build a robust admin panel to automate and manage the lifecycle of PPTP-based SOCKS and OVPN servers. The system must provide a clear, real-time view of the status of thousands of server configurations.

**Core Functional Requirements:**
1.  **Data Integrity:** All newly imported configurations must default to a  status. The UI dashboard, node table, and database must always be perfectly synchronized and reflect the real-time state of the nodes.
2.  **Manual Testing Workflow:** An administrator must be able to manually trigger a sequence of tests on selected nodes:
    *   **Ping Test:** Results in  or .
    *   **Speed Test:** Can be run on  nodes. Results in  or  (both are informational and permit service launch).
    *   **Service Launch:** Can be run on nodes that passed a speed test. This action must attempt to start **both SOCKS and OVPN services simultaneously**.
3.  **Real-Time Monitoring of Live Services:**
    *   Nodes where services are successfully launched receive an  status.
    *   An automated background process must monitor **only the  nodes** every 5 minutes.
    *   If a service on an  node becomes unresponsive, its status must automatically change to .
    *   A  timestamp must be recorded in the database whenever a node's status changes to  due to monitoring failure.
</product_requirements>

<key_technical_concepts>
- **Backend:** FastAPI, SQLAlchemy ORM
- **Frontend:** React.js
- **System Architecture:** Manually-triggered state machine for testing ( ->  -> / -> ) combined with an automated background monitoring process for the  state.
- **Data Synchronization:** Critical need to fix inconsistencies between the database, API endpoints (), and UI components.
- **Background Tasks:** Implementation of a recurring job (e.g., cron, scheduler) to perform health checks every 5 minutes.
</key_technical_concepts>

<code_architecture>
The application is a monorepo with a FastAPI backend and a React frontend. The current architecture supports a unified status system but contains logical flaws in status assignment and reporting.



-   ****
    -   **Importance:** Defines the  database model.
    -   **Anticipated Changes:** This file will need to be modified to add a new  field (likely a ) to the  model to track when a service last went offline.

-   ****
    -   **Importance:** Contains all API endpoints and business logic.
    -   **Anticipated Changes:** This file requires significant modification. The logic for importing nodes must be fixed to assign  as the default status. The  endpoint must be rewritten to accurately query and count nodes for each status. New logic for starting SOCKS+OVPN services and the background monitoring task will be implemented here.

-   ****
    -   **Importance:** Displays dashboard statistics and provides user controls.
    -   **Anticipated Changes:** The component needs to be edited to remove the redundant Total nodes: 2336 text. It will also need UI elements (buttons) to allow the administrator to manually trigger the ping, speed, and service launch tests on selected nodes.

-   ****
    -   **Importance:** Renders the main data table of all nodes.
    -   **Anticipated Changes:** This component must be verified to ensure it correctly displays the  status for all newly imported nodes after the backend fix is implemented. It should also correctly render the new  information when a node is .
</code_architecture>

<pending_tasks>
- **Fix Critical Bugs:**
    - Correct the import logic to ensure all new nodes are assigned the  status.
    - Fix the  endpoint to provide accurate counts for all statuses.
    - Remove the duplicate Total nodes display in the frontend UI.
- **Implement Core Features:**
    - Add a  field to the  model in the database.
    - Implement the simultaneous SOCKS+OVPN service launch functionality.
    - Create a background monitoring system to check  nodes every 5 minutes and update their status upon failure.
</pending_tasks>

<current_work>
The immediate context is the conclusion of a detailed requirements-gathering conversation with the user. The previous AI engineer has just formulated and confirmed the final, detailed technical specification for a complex set of features and bug fixes. No implementation has begun on these new tasks.

The application is currently in a non-functional state from a data integrity perspective. The user has populated the database with 2,336 configurations, but critical inconsistencies exist:
1.  **Database/Table View:** Newly added nodes incorrectly show an  status instead of the expected .
2.  **UI Dashboard:** The graphical report is not synchronized with the database. It incorrectly shows Not Tested: 0 when it should show 2,336.
3.  **UI Duplication:** The total node count is displayed redundantly.

The previous engineer's final action was to present a comprehensive summary of the refined tasks (Message 16 in the trajectory), which includes fixing the data synchronization issues, implementing a manual testing workflow, and building an automated monitoring system for active services. The user has implicitly approved this final plan, and the next step is to begin development, starting with the most critical bugs.
</current_work>

<optional_next_step>
Start by fixing the critical data synchronization bugs. First, correct the backend logic to ensure newly imported nodes are correctly assigned the  status, and then fix the  endpoint to accurately reflect the count of these nodes in the UI.
</optional_next_step>
