#!/usr/bin/env python3
"""
SOCKS Start/Stop Service Buttons Integration Tests
Testing the integration between AdminPanel buttons and SOCKS API endpoints
"""

import sys
sys.path.insert(0, '/app')

from backend_test import ConnexaAPITester

def main():
    print("="*80)
    print("üî• SOCKS START/STOP SERVICE BUTTONS INTEGRATION TESTING")
    print("="*80)
    print("\n–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:")
    print("–°–¶–ï–ù–ê–†–ò–ô 1: –ó–∞–ø—É—Å–∫ SOCKS –Ω–∞ —É–∑–ª–µ —Å ping_light —Å—Ç–∞—Ç—É—Å–æ–º")
    print("–°–¶–ï–ù–ê–†–ò–ô 2: –ó–∞–ø—É—Å–∫ SOCKS –Ω–∞ —É–∑–ª–µ —Å speed_ok —Å—Ç–∞—Ç—É—Å–æ–º")
    print("–°–¶–ï–ù–ê–†–ò–ô 3: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ SOCKS –Ω–∞ —É–∑–ª–µ —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
    print("–°–¶–ï–ù–ê–†–ò–ô 4: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SOCKS –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ ping_ok")
    print("–°–¶–ï–ù–ê–†–ò–ô 5: PPTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (backend logs)")
    print("–°–¶–ï–ù–ê–†–ò–ô 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ credentials")
    print("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
    print("- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Select All —Ä–µ–∂–∏–º–æ–º (filters)")
    print("- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ previous_status –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
    print("="*80)
    print()
    
    tester = ConnexaAPITester()
    
    # Login first
    print("üîê Logging in...")
    if not tester.test_login():
        print("‚ùå Login failed - cannot proceed with tests")
        return False
    
    print("\n" + "="*80)
    print("STARTING SOCKS INTEGRATION TESTS")
    print("="*80 + "\n")
    
    # Run SOCKS tests
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô 1: –ó–∞–ø—É—Å–∫ SOCKS –Ω–∞ —É–∑–ª–µ —Å ping_light —Å—Ç–∞—Ç—É—Å–æ–º")
    print("-" * 80)
    tester.test_socks_start_on_ping_light_node()
    
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô 2: –ó–∞–ø—É—Å–∫ SOCKS –Ω–∞ —É–∑–ª–µ —Å speed_ok —Å—Ç–∞—Ç—É—Å–æ–º")
    print("-" * 80)
    tester.test_socks_start_on_speed_ok_node()
    
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô 3: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ SOCKS –Ω–∞ —É–∑–ª–µ —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
    print("-" * 80)
    tester.test_socks_start_on_invalid_status_node()
    
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô 4: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SOCKS –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ ping_ok")
    print("-" * 80)
    tester.test_socks_stop_and_return_to_ping_ok()
    
    print("\nüìã –°–¶–ï–ù–ê–†–ò–ô 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ credentials")
    print("-" * 80)
    tester.test_socks_credentials_autogeneration()
    
    print("\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Select All —Ä–µ–∂–∏–º (filters)")
    print("-" * 80)
    tester.test_socks_select_all_mode()
    
    print("\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: previous_status —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    print("-" * 80)
    tester.test_socks_previous_status_preservation()
    
    # Print summary
    print("\n" + "="*80)
    print(f"TEST SUMMARY: {tester.tests_passed}/{tester.tests_run} tests passed")
    print(f"Success Rate: {(tester.tests_passed/tester.tests_run*100):.1f}%")
    print("="*80)
    
    return tester.tests_passed == tester.tests_run

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
